# handlers/start.py
from aiogram import Router, F, types
from aiogram.types import CallbackQuery, Message
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from keyboards.start_kb import start_kb

from keyboards.start_kb import get_register_kb
from database.db import get_user  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


router = Router()

# @router.message(CommandStart())
# async def cmd_start(message: types.Message):
#         await message.answer(text="–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç. üòä", reply_markup=start_kb)

@router.callback_query(F.data == "start")
async def handle_start_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=start_kb)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    user_id = callback.from_user.id
    user = await get_user(user_id)

    if user:
        text = f"üë§ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:\n\n" \
               f"–ò–º—è: {user['name']}\n" \
               f"–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: {user['employee_id']}"
        await callback.message.answer(text)
    else:
        await callback.message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.",
            reply_markup=get_register_kb()
        )
