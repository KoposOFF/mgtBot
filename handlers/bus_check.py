# handlers/bus_check.py
from aiogram import F, Router
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from database.db import get_bus_by_number, get_bus_reports

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ViewBusFSM(StatesGroup):
    waiting_for_bus_number = State()

# –ö–æ–º–∞–Ω–¥–∞ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤—Ç–æ–±—É—Å"
@router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤—Ç–æ–±—É—Å")
async def ask_bus_number(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–±—É—Å–∞:")
    await state.set_state(ViewBusFSM.waiting_for_bus_number)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞
@router.message(ViewBusFSM.waiting_for_bus_number)
async def show_bus_info(message: Message, state: FSMContext):
    if not message.text.isdigit() or len(message.text) != 4:
        return await message.answer("–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 4 —Ü–∏—Ñ—Ä.")
 
    bus_number = f"19{message.text}"

    bus = await get_bus_by_number(bus_number)
    if not bus:
        return await message.answer(f"–ê–≤—Ç–æ–±—É—Å —Å –Ω–æ–º–µ—Ä–æ–º {bus_number} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    reports = await get_bus_reports(bus["id"])
    if not reports:
        return await message.answer(f"–ü–æ –∞–≤—Ç–æ–±—É—Å—É {bus_number} –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")

    text = f"üöç –ê–≤—Ç–æ–±—É—Å {bus_number}\n\n"
    for report in reports:
        date = report["datetime"]
        problems = report["problems"].replace(",", "\n- ") if report["problems"] else "-"
        pluses = report["pluses"].replace(",", "\n- ") if report["pluses"] else "-"

        text += f"üìÖ {date}\n"
        text += f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã:\n- {problems}\n"
        text += f"‚úÖ –ü–ª—é—Å—ã:\n- {pluses}\n\n"

    await message.answer(text.strip())
    await state.clear()

